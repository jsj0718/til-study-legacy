# DFS : Depth - First Search, 깊이 우선 탐색(그래프에서 깊은 부분을 우선적으로 탐색하는 알고리즘)
# 그래프 기본 구조 : 그래프는 노드와 간선으로 표현되며, 노드를 정점이라고도 말함
# 그래프 탐색 : 하나의 노드를 시작으로 다수의 노드를 방문하는 것을 말함, 두 노드가 간선으로 연결되어 있다면 두 노드는 인접한다고 표현함
# 그래프 표현 방식 2가지 : 
# 1) 인접 행렬 : 2차원 배열로 그래프 연결 관계를 표현하는 방식
# 2) 인접 리스트 : 리스트로 그래프의 연결 관계를 표현하는 방식

# 인접 행렬 방식 예제

# INF = 999999999 # 실제 코드에서 논리적으로 정답이 될 수 없는 큰 값 중에서 999999999, 987654321 등의 값으로 초기화

# # 2차원 리스트를 통해 인접 행렬 표현
# graph = [
#     [0, 7, 5],
#     [7, 0, INF],
#     [5, INF, 0]
# ]

# print(graph)

# # 인접 리스트 방식

# # 행(row)이 3개인 2차원 리스트로 인접 리스트 표현
# graph = [[] for _ in range(3)]

# # 노드 0에 연결된 노드 정보 저장(노드, 거리)
# graph[0].append((1, 7))
# graph[0].append((2, 5))

# # 노드 1에 연결된 노드 정보 저장(노드, 거리)
# graph[1].append((0, 7))

# # 노드 2에 연결된 노드 정보 저장(노드, 거리)
# graph[2].append((0, 5))

# print(graph)

# 인접 행렬 vs 인접 리스트 비교
# 메모리 효율성 : 인접 행렬 < 인접 리스트 (인접 행렬은 모든 관계를 저장하기 때문)
# 정보를 얻는 속도 : 인접 행렬 > 인접 리스트 (인접 리스트는 연결된 정보만을 저장하기에 하나씩 확인해야 함)
# e.x) 노드1과 노드7의 연결 확인 시 인접 행렬은 graph[1][7]이면 알 수 있지만, 인접 리스트는 앞에서부터 차례대로 확인해야 알 수 있다.

# DFS 예제

# DFS 메서드 정의
def dfs(graph, v, visited):
    # 현재 노드를 방문 처리
    visited[v] = True
    print(v, end=' ')
    # 현재 노드와 연결된 다른 노드를 재귀적으로 방문
    for i in graph[v]:
        if not visited[i]:
            dfs(graph, i, visited)

# 각 노드가 연결된 정보를 리스트 자료형으로 나타내기(2차원 리스트)
graph = [
    [],
    [2,3,8],
    [1,7],
    [1,4,5],
    [3,5],
    [3,4],
    [7],
    [2,6,8],
    [1,7]
]

# 각 노드가 방문된 정보를 리스트 자료형으로 표현(1차원 리스트)
visited = [False] * 9

# 정의된 DFS 함수 출력
dfs(graph, 1, visited)